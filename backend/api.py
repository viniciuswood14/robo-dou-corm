from fastapi import FastAPI, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Set, Dict
from datetime import datetime
import os, io, zipfile, json, re
from urllib.parse import urljoin

import httpx
from bs4 import BeautifulSoup

# #############################################################
# ########## VERS√ÉO 10.0 - PROCESSAMENTO MULTI-SE√á√ÉO ##########
# #############################################################

app = FastAPI(title="Rob√¥ DOU API (INLABS XML) - v10.0 Multi-Se√ß√£o")

app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

# ====== CONFIG ======
# ... (config INLABS inalterada) ...

# ====== ANOTA√á√ïES PADR√ÉO ======
ANNOTATION_NEGATIVE = "N√£o h√° men√ß√£o espec√≠fica ou impacto direto identificado para a Marinha do Brasil, o Comando da Marinha, o Fundo Naval ou o Fundo do Desenvolvimento do Ensino Profissional Mar√≠timo nas partes da publica√ß√£o analisadas."

# ====== LISTAS DE PALAVRAS-CHAVE POR SE√á√ÉO ======

# SE√á√ÉO 1
MPO_NAVY_TAGS = {"52131": "Comando da Marinha", "52133": "Secretaria da Comiss√£o Interministerial para os Recursos do Mar", "52232": "Caixa de Constru√ß√µes de Casas para o Pessoal da Marinha - CCCPM", "52233": "Amaz√¥nia Azul Tecnologias de Defesa S.A. - AMAZUL", "52931": "Fundo Naval", "52932": "Fundo de Desenvolvimento do Ensino Profissional Mar√≠timo", "52000": "Minist√©rio da Defesa"}
KEYWORDS_DIRECT_INTEREST_S1 = ["minist√©rio da defesa", "for√ßas armadas", "comandos da marinha", "comando da marinha", "marinha do brasil", "fundo naval", "amaz√¥nia azul tecnologias de defesa", "caixa de constru√ß√µes de casas para o pessoal da marinha", "empresa gerencial de projetos navais", "fundo de desenvolvimento do ensino profissional mar√≠timo", "programa nuclear brasileiro"]
BUDGET_KEYWORDS_S1 = ["cr√©dito suplementar", "cr√©dito extraordin√°rio", "execu√ß√£o or√ßament√°ria", "lei or√ßament√°ria", "or√ßamentos fiscal", "refor√ßo de dota√ß√µes", "programa√ß√£o or√ßament√°ria e financeira", "altera grupos de natureza de despesa", "limites de movimenta√ß√£o", "limites de pagamento", "fontes de recursos", "movimenta√ß√£o e empenho", "classifica√ß√£o or√ßament√°ria", "gest√£o fiscal"]
BROAD_IMPACT_KEYWORDS_S1 = ["diversos √≥rg√£os", "v√°rios √≥rg√£os", "diversos minist√©rios"]
MPO_ORG_STRING = "minist√©rio do planejamento e or√ßamento"

# SE√á√ÉO 2
# Lista consolidada com os termos que voc√™ pediu
KEYWORDS_SECAO_2 = sorted(list(set([
    "Substitui√ß√£o", "Substituto", "Viagem", "Afastamento do Pa√≠s", "Nomea√ß√£o", "Nomear", "Exonera√ß√£o", "Exonerar", "Designar", "Dispensar",
    "Comandante da Marinha", "Almirante", "Almirantes", "SOF", "SG-MD", "SEORI-MD", "DEORG-MD", "DEOFM",
    "Secret√°ria Adjunta VII", "SEPAC", "CC-PR",
    "VAlte (IM)", "CAlte (IM)", "CMG (IM)", "CF (IM)", "CC (IM)", "CT (IM)", "1T (IM)", "2¬∫T (IM)",
    "CLAYTON LUIZ MONTES", "ANTONIO CARLOS FRISSO J√öNIOR", "MICHELLE FEVERSANI PROLO", "MYCHELLE CELESTE RABELO DE S√Å", "GERMANO SANTANA DE FREITAS", "F√ÅBIO PIFANO PONTES", "SERGIO PINHEIRO FIRPO", "UGO CARNEIRO CURADO", "ALEX FRAGA", "PABLO DA N√ìBREGA", "JORGE LUIZ MARONI DIAS", "ADRIANA RIBEIRO MARQUES", "ALEXANDRE AUGUSTO MENDES HATADANI", "FERNANDA COSTA BERNARDES LOUZADA", "MARCOS BARBosa PINTO", "THALITA FERREIRA DE OLIVEIRA", "CINARA DIAS CUST√ìDIO", "KELLY MIYUKI OSHIRO", "BRUNO MORETTI", "EULER ALBERGARIA DE MELO", "RODRIGO RODRIGUES DA FONSECA", "ROBERTO RAMOS COLLETTI", "PATRICK DE FARIA E SILVA", "D√âBORA RAQUEL CRUZ FERREIRA", "ELISA VIEIRA LEONEL", "RICARDO LEE NAMBA", "FABIO HENRIQUE BITTES TERRA", "BRUNO CIRILO MENDON√áA DE CAMPOS", "CHARLES CARVALHO GUEDES", "VIVIANE APARECIDA DA SILVA VARGA", "MARCELO PEREIRA DE AMORIM", "PAULO JOS√â DOS REIS SOUZA", "MIGUEL RAGONE DE MATTOS", "MARCELO MARTINS PIMENTEL", "JOS√â ROBERTO DE MORAES REGO PAIVA FERNANDES J√öNIOR", "JOS√â FERNANDES PONTES JUNIOR", "WALTER COSTA SANTOS", "GILSON ALVES DE ALMEIDA J√öNIOR", "GUILHERME LOURO BRAGA", "AUGUSTO C√âSAR DE CARVALHO FONSECA", "CINARA WAGNER FREDO", "MAX RODRIGO TOMAZ DE AQUINO ELIAS", "ANDR√â GUIMAR√ÉES RESENDE MARTINS DO VALLE", "ANDR√â CORREIA CARDOSO", "OSWALDO GOMES DOS REIS JUNIOR", "FRANSELMO ARA√öJO COSTA", "JOS√â LOPES FERNANDES", "MARCELO ARANTES GUEDON", "HERALDO LUIZ RODRIGUES", "JULIANA RIBEIRO LARENAS", "MAUR√çCIO DE SOUZA BEZERRA", "IDERV√ÇNIO DA SILVA COSTA", "VIRGINIE HURST", "UALLACE MOREIRA LIMA", "LUIS FELIPE GIESTEIRA", "ROMILSON VOLOT√ÉO", "RAQUEL BARBOSA DE ALBUQUERQUE", "ANALIZE LENZI RUAS DE ALMEIDA", "FAB√çOLA INEZ GUEDES DE CASTRO SALDANHA", "SUELY DIB DE SOUZA E SILVA", "ANA LUCIA GATTO DE OLIVEIRA", "ANA RACHEL FREITAS", "FABIANI FADEL BORIN", "DARCIO GUEDES JUNIOR", "M√ÅRIO LU√çS GURGEL DE SOUZA", "ELONI CARLOS MARIANI", "BRUNO C√âSAR GROSSI DE SOUZA", "KLEBER PAULINO DE SOUZA", "FERNANDO QUEIROZ", "FLAVIO GESCA VERISSIMO DE PAULA", "PAULO ALVARENGA", "MARIANA CUNHA ELEUT√âRIO RODRIGUES", "FABIANA MATSUO NOMURA", "VIVIANE VECCHI MENDES MULLER", "ARTUR OLAVO FERREIRA", "ALEXANDRINO MACHADO NETO", "ALEXANDRE RODRIGUES VIVEIROS", "LEONARDO DIAS DE ASSUMP√á√ÉO", "GUSTAVO PEREIRA PINTO", "ALEXANDRE AUGUSTO LOPES VILLELA DE MORAES", "ALEXANDRE DE MELLO BRAGA", "VICTOR LEAL DOMINGUES", "RICARDO YUKIO IAMAGUCHI", "MARCELLO NOGUEIRA CANUTO", "MARCO ALEXANDRE RODRIGUES DE AGUIAR", "MARCOS SAMPAIO OLSEN", "RENATO RODRIGUES DE AGUIAR FREIRE", "LEONARDO PUNTEL", "CELSO LUIZ NAZARETH", "CL√ÅUDIO PORTUGAL DE VIVEIROS", "ANDR√â LUIZ SILVA LIMA DE SANTANA MENDES", "CLAUDIO HENRIQUE MELLO DE ALMEIDA", "EDUARDO MACHADO VAZQUEZ", "EDGAR LUIZ SIQUEIRA BARBOSA", "ALEXANDRE RABELLO DE FARIA", "S√çLVIO LU√çS DOS SANTOS", "ARTHUR FERNANDO BETTEGA CORR√äA", "RENATO GARCIA ARRUDA", "CARLOS CHAGAS VIANNA BRAGA", "GUILHERME DA SILVA COSTA", "PAULO C√âSAR BITTENCOURT FERREIRA", "ANDR√â LUIZ DE ANDRADE FELIX", "JOS√â ACHILLES ABREU JORGE TEIXEIRA", "ANDR√â MORAES FERREIRA", "MARCELO MENEZES CARDOSO", "THADEU MARCOS OROSCO COELHO LOBO", "ANTONIO CARLOS CAMBRA", "ALEXANDER REIS LEITE", "AUGUSTO JOS√â DA SILVA FONSECA JUNIOR", "ROGERIO PINTO FERREIRA RODRIGUES", "MARCO ANTONIO ISMAEL TROV√ÉO DE OLIVEIRA", "JO√ÉO ALBERTO DE ARAUJO LAMPERT", "GUSTAVO CALERO GARRIGA PIRES", "MARCO ANT√îNIO LINHARES SOARES", "CARLOS ANDR√â CORONHA MACEDO", "CARLOS HENRIQUE DE LIMA ZAMPIERI", "ADRIANO MARCELINO BATISTA", "JOS√â CL√ÅUDIO OLIVEIRA MACEDO", "JOS√â VICENTE DE ALVARENGA FILHO", "MANOEL LUIZ PAV√ÉO BARROSO", "IUNIS T√ÅVORA SAID", "MARCELO DA SILVA GOMES", "PEDRO AUGUSTO BITTENCOURT HEINE FILHO", "JORGE JOS√â DE MORAES RULFF", "MARCELO REIS DA SILVA", "RICARDO JAQUES FERREIRA", "FRANCISCO ANDR√â BARROS CONDE", "VAGNER BELARMINO DE OLIVEIRA", "ALEXANDRE BESSA DE OLIVEIRA", "ALEXANDRE ITIRO VILLELA ASSANO", "ALEXANDRE TAUMATURGO PAVONI", "ANTONIO BRAZ DE SOUZA", "ALEXANDRE VERAS VASCONCELOS", "S√âRGIO BLANCO OZ√ìRIO", "HUMBERTO LUIS RIBEIRO BASTOS CARMO", "ALEXANDRE AMENDOEIRA NUNES", "NEYDER CAMILLO DE BARROS", "EMERSON AUGUSTO SERAFIM", "GIOVANI CORR√äA", "RICARDO LHAMAS GUASTINI", "GUSTAVO LEITE CYPRIANO NEVES", "MAURICIO BARATA SOARES COELHO RANGEL", "JO√ÉO CANDIDO MARQUES DIAS", "JO√ÉO BATISTA BARBOSA", "CARLOS MARCELO FERNANDES CONSIDERA", "DINO AVILA BUSSO", "H√âLIO MOREIRA BRANCO JUNIOR", "LEANDRO FERRONE DEM√âTRIO DE SOUZA", "FERNANDO DE LUCA MARQUES DE OLIVEIRA", "PAULO MAX VILLAS DA SILVA", "JOS√â CARLOS DE SOUZA JUNIOR", "MARCELO DO NASCIMENTO MARCELINO", "ANDR√â GUSTAVO SILVEIRA GUIMAR√ÉES", "ALVARO VALENTIM LEMOS", "WASHINGTON LUIZ DE PAULA SANTOS", "PAULO ROBERTO BLANCO OZORIO", "ROBLEDO DE LEMOS COSTA E S√Å", "MARCELO LANCELLOTTI", "S√âRGIO TADEU LE√ÉO ROS√ÅRIO", "ANDR√â RICARDO ARAUJO SILVA", "LEONARDO PACHECO VIANNA", "CARLOS ALEXANDRE ALVES BORGES DIAS", "ANDERSON MARCOS ALVES DA SILVA", "LEONARDO CAVALCANTI DE SOUZA LIMA", "LEONARDO BRAGA MARTINS", "ANDR√â LUIZ GON√áALVES RIBEIRO", "ANDR√â BASTOS SILVA", "ANDR√â LUIZ SANTOS DA SILVA", "ALCIDES ROBERTO NUNES", "MARCELO BRASIL CARVALHO DA FONSECA", "EDUARDO QUESADO FILGUEIRAS"
]), key=str.lower)))


class Publicacao(BaseModel):
    organ: Optional[str] = None
    type: Optional[str] = None
    summary: Optional[str] = None
    raw: Optional[str] = None
    relevance_reason: Optional[str] = None
    section: Optional[str] = None # Novo campo para agrupar

class ProcessResponse(BaseModel):
    # ... (inalterado) ...

# ... (fun√ß√£o norm inalterada) ...

def monta_whatsapp(pubs: List[Publicacao], when: str) -> str:
    # L√≥gica de data e sauda√ß√£o
    meses_pt = {1: "JAN", 2: "FEV", 3: "MAR", 4: "ABR", 5: "MAI", 6: "JUN", 7: "JUL", 8: "AGO", 9: "SET", 10: "OUT", 11: "NOV", 12: "DEZ"}
    try:
        dt = datetime.fromisoformat(when)
        dd = f"{dt.day:02d}{meses_pt.get(dt.month, '')}"
    except Exception:
        dd = when
    
    lines = ["Bom dia, senhores!", "", f"PTC as seguintes publica√ß√µes de interesse no DOU de {dd}:", ""]

    # Agrupa publica√ß√µes por se√ß√£o
    pubs_by_section: Dict[str, List[Publicacao]] = {}
    for p in pubs:
        sec = p.section or "DOU"
        if sec not in pubs_by_section:
            pubs_by_section[sec] = []
        pubs_by_section[sec].append(p)

    if not pubs:
        lines.append("‚Äî Sem ocorr√™ncias para os crit√©rios informados ‚Äî")
        return "\n".join(lines)

    # Itera sobre as se√ß√µes e imprime o conte√∫do
    for section_name in sorted(pubs_by_section.keys()):
        lines.append(f"üî∞ {section_name.replace('DO', 'Se√ß√£o ')}")
        lines.append("")
        for p in pubs_by_section[section_name]:
            lines.append(f"‚ñ∂Ô∏è {p.organ or '√ìrg√£o'}")
            lines.append(f"üìå {p.type or 'Ato/Portaria'}")
            if p.summary: lines.append(p.summary)
            if p.relevance_reason:
                lines.append(f"‚öì {p.relevance_reason}")
            else:
                lines.append("‚öì Para conhecimento.")
            lines.append("")
            
    return "\n".join(lines)


def process_grouped_materia(main_article: BeautifulSoup, full_text_content: str) -> Optional[Publicacao]:
    organ = norm(main_article.get('artCategory', ''))
    section = main_article.get('pubName', '').upper()
    body = main_article.find('body')
    if not body: return None

    act_type = norm(body.find('Identifica').get_text(strip=True) if body.find('Identifica') else "")
    if not act_type: return None

    summary = norm(body.find('Ementa').get_text(strip=True) if body.find('Ementa') else "")
    display_text = norm(body.get_text(strip=True))
    if not summary:
        match = re.search(r'EMENTA:(.*?)(Vistos|ACORDAM)', display_text, re.DOTALL | re.I)
        if match: summary = norm(match.group(1))

    search_content_lower = norm(full_text_content).lower()
    
    is_relevant = False
    reason = None
    
    # Aplica o filtro correto com base na se√ß√£o
    if "DO1" in section:
        is_mpo = MPO_ORG_STRING in organ.lower()
        if is_mpo:
            found_tags_in_mpo = [name for code, name in MPO_NAVY_TAGS.items() if code in search_content_lower]
            if found_tags_in_mpo:
                is_relevant = True
                reason = f"H√° men√ß√£o espec√≠fica ou impacto direto identificado para {', '.join(found_tags_in_mpo)} nas partes da publica√ß√£o analisadas."
            elif any(bkw in search_content_lower for bkw in BUDGET_KEYWORDS_S1):
                is_relevant = True
                reason = ANNOTATION_NEGATIVE
        else:
            for kw in KEYWORDS_DIRECT_INTEREST_S1:
                if kw in search_content_lower:
                    is_relevant = True
                    reason = f"H√° men√ß√£o espec√≠fica √† TAG: '{kw}'."
                    break
    
    elif "DO2" in section:
        for kw in KEYWORDS_SECAO_2:
            # Para nomes, a busca deve ser mais cuidadosa
            if len(kw) > 4 and kw.isalpha(): # Heur√≠stica para nomes
                if kw.lower() in search_content_lower:
                    is_relevant = True
                    reason = f"Ato de pessoal (Se√ß√£o 2): men√ß√£o a '{kw}'."
                    break
            else: # Para siglas e termos
                if re.search(r'\b' + re.escape(kw.lower()) + r'\b', search_content_lower):
                    is_relevant = True
                    reason = f"Ato de pessoal (Se√ß√£o 2): men√ß√£o a '{kw}'."
                    break

    if is_relevant:
        final_summary = summary if summary else (display_text[:500] + '...' if len(display_text) > 500 else display_text)
        return Publicacao(
            organ=organ,
            type=act_type,
            summary=final_summary,
            raw=display_text,
            relevance_reason=reason,
            section=section
        )
    return None

# ... (demais fun√ß√µes do backend, como login e download, inalteradas) ...

@app.post("/processar-inlabs", response_model=ProcessResponse)
# ... (l√≥gica principal inalterada, j√° agrupa por mat√©ria) ...
